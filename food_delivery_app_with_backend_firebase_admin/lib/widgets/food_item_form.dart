import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:provider/provider.dart';
import '../models/food_catergory.dart';
import '../models/food_item.dart';
import '../providers/menu_provider.dart';

class FoodItemForm extends StatefulWidget {
  @override
  _FoodItemFormState createState() => _FoodItemFormState();
}

class _FoodItemFormState extends State<FoodItemForm> {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _descriptionController = TextEditingController();
  final _imagePathController = TextEditingController();
  final _priceController = TextEditingController();

  String? _selectedCategoryId;
  List<FoodCategory> _categories = [];
  bool _loadingCategories = true;

  @override
  void initState() {
    super.initState();
    _fetchCategoriesFromFirestore();
  }

  Future<void> _fetchCategoriesFromFirestore() async {
    try {
      final snapshot =
          await FirebaseFirestore.instance.collection('categories').get();
      final cats =
          snapshot.docs.map((doc) => FoodCategory.fromMap(doc.data())).toList();

      setState(() {
        _categories = cats;
        _loadingCategories = false;
      });
    } catch (e) {
      setState(() {
        _loadingCategories = false;
      });
      // Handle the error (show a message or something)
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Failed to load categories')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: const Text('Add Food Item'),
      content: Form(
        key: _formKey,
        child: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextFormField(
                controller: _nameController,
                decoration: const InputDecoration(labelText: 'Food Name'),
                validator: (value) => value == null || value.isEmpty
                    ? 'Please enter a food name'
                    : null,
              ),
              TextFormField(
                controller: _descriptionController,
                decoration: const InputDecoration(labelText: 'Description'),
                validator: (value) => value == null || value.isEmpty
                    ? 'Please enter a description'
                    : null,
              ),
              TextFormField(
                controller: _imagePathController,
                decoration: const InputDecoration(labelText: 'Image Path'),
                validator: (value) => value == null || value.isEmpty
                    ? 'Please enter an image path'
                    : null,
              ),
              TextFormField(
                controller: _priceController,
                decoration: const InputDecoration(labelText: 'Price'),
                keyboardType: TextInputType.number,
                validator: (value) => value == null || value.isEmpty
                    ? 'Please enter a price'
                    : null,
              ),
              const SizedBox(height: 12),
              _loadingCategories
                  ? const Padding(
                      padding: EdgeInsets.symmetric(vertical: 8.0),
                      child: CircularProgressIndicator(),
                    )
                  : DropdownButtonFormField<String>(
                      value: _selectedCategoryId,
                      decoration:
                          const InputDecoration(labelText: 'Select Category'),
                      items: _categories
                          .map((category) => DropdownMenuItem<String>(
                                value: category.id,
                                child: Text(category.name),
                              ))
                          .toList(),
                      validator: (value) =>
                          value == null ? 'Please select a category' : null,
                      onChanged: (value) {
                        setState(() {
                          _selectedCategoryId = value;
                        });
                      },
                    ),
            ],
          ),
        ),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.pop(context),
          child: const Text('Cancel'),
        ),
        TextButton(
          onPressed: () async {
            if (_formKey.currentState!.validate()) {
              final foodItem = FoodItem(
                id: '', // Will be auto-generated by Firestore or some logic
                name: _nameController.text,
                description: _descriptionController.text,
                imagePath: _imagePathController.text,
                price: double.parse(_priceController.text),
                categoryId: _selectedCategoryId!,
              );

              await Provider.of<MenuProvider>(context, listen: false)
                  .addItem(foodItem);
              Navigator.pop(context);

              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('Food item added successfully')),
              );
            }
          },
          child: const Text('Add'),
        ),
      ],
    );
  }
}
